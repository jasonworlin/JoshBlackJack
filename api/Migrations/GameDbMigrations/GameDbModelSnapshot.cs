// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace api.Migrations.GameDbMigrations
{
    [DbContext(typeof(GameDb))]
    partial class GameDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("common.Domain.Bot", b =>
                {
                    b.Property<int>("BotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hand1HandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hand2HandId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBusted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSplit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasStuck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasWon")
                        .HasColumnType("INTEGER");

                    b.HasKey("BotId");

                    b.HasIndex("GameId");

                    b.HasIndex("Hand1HandId");

                    b.HasIndex("Hand2HandId");

                    b.ToTable("Bots", (string)null);
                });

            modelBuilder.Entity("common.Domain.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Suit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardId");

                    b.HasIndex("DeckId");

                    b.HasIndex("HandId");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("common.Domain.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HandId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBusted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSplit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasStuck")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("DealerId");

                    b.HasIndex("HandId");

                    b.ToTable("Dealers", (string)null);
                });

            modelBuilder.Entity("common.Domain.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("DeckId");

                    b.ToTable("Decks", (string)null);
                });

            modelBuilder.Entity("common.Domain.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DealerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId");

                    b.HasIndex("DealerId");

                    b.HasIndex("DeckId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("common.Domain.Hand", b =>
                {
                    b.Property<int>("HandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("HandId");

                    b.ToTable("Hands");
                });

            modelBuilder.Entity("common.Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BetPlaced")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanSplit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Hand1HandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hand2HandId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBusted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasStuck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasWon")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId");

                    b.HasIndex("Hand1HandId");

                    b.HasIndex("Hand2HandId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("common.Domain.Bot", b =>
                {
                    b.HasOne("common.Domain.Game", null)
                        .WithMany("Bots")
                        .HasForeignKey("GameId");

                    b.HasOne("common.Domain.Hand", "Hand1")
                        .WithMany()
                        .HasForeignKey("Hand1HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("common.Domain.Hand", "Hand2")
                        .WithMany()
                        .HasForeignKey("Hand2HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hand1");

                    b.Navigation("Hand2");
                });

            modelBuilder.Entity("common.Domain.Card", b =>
                {
                    b.HasOne("common.Domain.Deck", null)
                        .WithMany("Cards")
                        .HasForeignKey("DeckId");

                    b.HasOne("common.Domain.Hand", null)
                        .WithMany("Cards")
                        .HasForeignKey("HandId");
                });

            modelBuilder.Entity("common.Domain.Dealer", b =>
                {
                    b.HasOne("common.Domain.Hand", "Hand")
                        .WithMany()
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("common.Domain.Game", b =>
                {
                    b.HasOne("common.Domain.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("common.Domain.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("common.Domain.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("Deck");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("common.Domain.Player", b =>
                {
                    b.HasOne("common.Domain.Hand", "Hand1")
                        .WithMany()
                        .HasForeignKey("Hand1HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("common.Domain.Hand", "Hand2")
                        .WithMany()
                        .HasForeignKey("Hand2HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hand1");

                    b.Navigation("Hand2");
                });

            modelBuilder.Entity("common.Domain.Deck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("common.Domain.Game", b =>
                {
                    b.Navigation("Bots");
                });

            modelBuilder.Entity("common.Domain.Hand", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}

@page "/playblackjack"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using common.Domain;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager



<div id="game">
  @if (Game.Bots.Count() > 0)
  {
    var cardIndex = 0;
    @if (ShowDealerCard)
    {
      @foreach (var card in Game.Dealer.Hand.Cards)
      {
        <div class="card"
    style="width:100px; height:150px; z-index: @cardIndex; top:100px; right:@(500 - cardIndex * 40)px; position:absolute;">
          <div class="card-body" style="padding: 0%;">
            <h4 class="card-title">
              <div>
                <span>@card.Value</span>
                <div><img width="30px" src="@GetSymbolForSuit(@card.Suit)"></div>
              </div>
            </h4>
          </div>
        </div>
        cardIndex++;
      }
    }
    else
    {
      <div class="card"
    style="width:100px; height:150px; z-index: @cardIndex; top:100px; right:@(500 - cardIndex * 40)px; position:absolute;">
        <div class="card-body" style="padding: 0%;">
          <h4 class="card-title">
            <div>
              <span>@Game.Dealer.Hand.Cards[0].Value</span>
              <div><img width="30px" src="@GetSymbolForSuit(@Game.Dealer.Hand.Cards[0].Suit)"></div>
            </div>
          </h4>
        </div>
      </div>
      cardIndex++;

      <div class="card"
    style="width:100px; height:150px; z-index: @cardIndex; top:100px; right:@(500 - cardIndex * 40)px; position:absolute;">
        <div id="dealer-blank" class="card-body" style="padding: 0%;">
          <h4 class="card-title">
            <div class="dealer-blank">

            </div>
          </h4>
        </div>
      </div>
    }


    var botIndex = 0;
    @foreach (var bot in Game.Bots)
    {
      <div style="height: 500px;" />
      cardIndex = 0;
      @foreach (var card in bot.Hand1.Cards)
      {
        <div class="card"
    style="width:100px; height:150px; z-index: @cardIndex; top:300px; right:@(860 - cardIndex * 40)px; position:absolute;">
          <div class="card-body" style="padding: 0%;">
            <h4 class="card-title">
              <div>
                <span>@card.Value</span>
                <div><img width="30px" src="@GetSymbolForSuit(@card.Suit)"></div>
              </div>
            </h4>
          </div>
        </div>
        cardIndex++;
      }

      <div style="position: relative;
    left: 100px;
    top: -40px;
    color: @GetBotStatusColour(bot);
    font-size: x-large;
    font-family: fantasy;">@GetBotStatus(bot)</div>


      cardIndex = 0;
      @foreach (var card in Game.Player.Hand1.Cards)
      {
        <div class="card"
    style="width:100px; height:150px; z-index: @cardIndex; top:350px; right:@(500 - cardIndex * 40)px; position:absolute;">
          <div class="card-body" style="padding: 0%;">
            <h4 class="card-title">
              <div>
                <span>@card.Value</span>
                <div><img width="30px" src="@GetSymbolForSuit(@card.Suit)"></div>
              </div>
            </h4>
          </div>
        </div>
        cardIndex++;
      }

      <div style="    position: relative;
    left: 400px;
    top: -10px;
    color: @GetPlayerStatusColour(Game.Player);
    font-size: x-large;
    font-family: fantasy;">@GetPlayerStatus(Game.Player)</div>
    }
  }
  else
  {
    <div style="height: 550px;"></div>
  }

  <div class="betting">
    <div class="bet-square">
      <p>Bots: </p>
      <p id="number-of-bots">@newGame.NumberOfBots</p>
    </div>
    <div class="pot-square">
      <p></p>
      <p id="pot"></p>
    </div>
    <div class="chips">
      <div id="one" @onclick="() => SetBots(1)">
        <img src="images/Bot1.png">
      </div>
      <div id="two" @onclick="() => SetBots(2)">
        <img src="images/Bot2.png">
      </div>
    </div>
  </div>

  <div class="betting">
    <div class="bet-square">
      <p>Bet: </p>
      <p id="bet">£@newGame.BetPlaced</p>
    </div>
    <div class="pot-square">
      <p>Chips:</p>
      <p id="pot">£@userBalance</p>
    </div>
    <div class="chips">
      <div id="five" @onclick="() => PlaceBet(5)">
        <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1151732/chip-5.png">
      </div>
      <div id="ten" @onclick="() => PlaceBet(10)">
        <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1151732/chip-7.png">
      </div>
      <div id="fifteen" @onclick="() => PlaceBet(15)">
        <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1151732/chip-4.png">
      </div>
      <div id="clear" @onclick="() => PlaceBet(0)">
        <img src="images/clear-bet.png">
      </div>
    </div>
  </div>

  <div class="button-container">
    <div class="buttons">
      <button id="deal-button" @onclick="() => CreateGame()">Deal</button>
      <button id="bot-play" @onclick="() => BotPlay()">Bot Play</button>
      <button id="doubledown">Double Down</button>
      <button id="hit-button" @onclick="() => PlayerHit()">Hit</button>
      <button id="stand-button" @onclick="() => PlayerStick()">Stand</button>
    </div>
  </div>
</div>

@code {

  private string? message;
  private NewGame newGame = new NewGame { NumberOfBots = 0 };
  private Game Game = new();
  private User User = new();
  private bool ShowDealerCard = false;
  private int userBalance;

  protected override void OnInitialized()
  {
    int userId;
    NavManager.TryGetQueryString<int>("userId", out userId);
    User.UserId = userId;

    int balance;
    NavManager.TryGetQueryString<int>("balance", out userBalance);
    User.Balance = userBalance;
  }

  private void PlaceBet(int bet)
  {
    if (userBalance - bet < 0)
    {
      return;
    }

    if (bet == 0)
    {
      newGame.BetPlaced = 0;
      userBalance = User.Balance;
    }
    else
    {
      newGame.BetPlaced += bet;
      userBalance -= bet;
    }
  }

  private void SetBots(int numberOfBots)
  {
    newGame.NumberOfBots = numberOfBots;
  }

  private async void PlayerSplit()
  {

    System.Console.WriteLine("£");
  }

  private async void CreateGame()
  {
    message = string.Empty;
    ShowDealerCard = false;

    // TODO: Pull this out into a function as we use this code everywhere
    var request = new HttpRequestMessage(HttpMethod.Post, $"https://localhost:7102/Game");
    request.Content = new StringContent(JsonSerializer.Serialize(newGame), Encoding.UTF8, "application/json");

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      Game = await JsonSerializer.DeserializeAsync<Game>(responseStream);
    }
    else
    {
      var responseString = await response.Content.ReadAsStringAsync();

      message = "Failed to create a new game. " + responseString;
    }

    StateHasChanged();
  }

  private async void BotPlay()
  {
    var request = new HttpRequestMessage(HttpMethod.Post, $"https://localhost:7102/Bot/Play?gameId={Game.GameId}");

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      Game = await JsonSerializer.DeserializeAsync<Game>(responseStream);
    }
    else
    {
      message = "Failed to play bot hand";
    }

    StateHasChanged();
  }

  private async void PlayerHit()
  {
    var request = new HttpRequestMessage(HttpMethod.Post,
    $"https://localhost:7102/Player/Hit?gameId={Game.GameId}&bet={newGame.BetPlaced}");

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      Game = await JsonSerializer.DeserializeAsync<Game>(responseStream);

      if (Game.Player.HasBusted)
      {
        DealerPlay();
      }

      StateHasChanged();
    }
    else
    {
      message = "Failed to take players turn";
    }
  }
  private async void PlayerStick()
  {
    var request = new HttpRequestMessage(HttpMethod.Post, $"https://localhost:7102/Player/Stick?gameId={Game.GameId}");

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      Game = await JsonSerializer.DeserializeAsync<Game>(responseStream);

      DealerPlay();

      StateHasChanged();
    }
    else
    {
      message = "Failed to take players turn";
    }
  }
  private async void DealerPlay()
  {
    ShowDealerCard = true;

    System.Console.WriteLine($"Jst abt to ply DEALER on game {Game.GameId}");

    var request = new HttpRequestMessage(HttpMethod.Post, $"https://localhost:7102/Dealer/Play?gameId={Game.GameId}");

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      Game = await JsonSerializer.DeserializeAsync<Game>(responseStream);

      System.Console.WriteLine($"Returning Game after Dealer play");
      System.Console.WriteLine($"Player Won {Game.Player.HasWon}");
      System.Console.WriteLine($"Bots Won {Game.Bots.Any(x => x.HasWon)}");

      userBalance = Game.Player.Balance;

      @foreach (var bot in Game.Bots)
      {
        if (bot.HasWon)
          System.Console.WriteLine($"UI, has bot won");
      }

      // Game now contains the final state of the
    }
    else
    {
      message = "Failed to play dealer hand";
    }

    newGame.BetPlaced = 0;

    StateHasChanged();
  }

  private string GetSymbolForSuit(string suit)
  {
    switch (suit)
    {
      case "Hearts":
        return "images/Heart.png";

      case "Clubs":
        return "images/Club.png";

      case "Diamonds":
        return "images/Diamond.png";

      case "Spades":
        return "images/Spade.png";

      default:
        return "Unknown Suit";
    }
  }

  private string GetBotStatus(Bot bot)
  {
    if (bot.HasBusted)
      return "BUSTED";
    else if (bot.HasWon)
      return "WINNER";
    else if (!Game.Dealer.HasStuck && bot.HasStuck)
      return "STICKING";
    else if (Game.Dealer.HasStuck)
      return "LOST";
    else
      return string.Empty;
  }

  private string GetBotStatusColour(Bot bot)
  {
    if (bot.HasBusted)
      return "Red";
    else if (bot.HasWon)
      return "Green";
    else if (!Game.Dealer.HasStuck && bot.HasStuck)
      return "White";
    else if (Game.Dealer.HasStuck)
      return "Red";
    else
      return string.Empty;
  }

  private string GetPlayerStatus(Player player)
  {
    if (player.HasBusted)
      return "BUSTED";
    else if (player.HasWon)
      return "WINNER";
    else if (!Game.Dealer.HasStuck && player.HasStuck)
      return "STICKING";
    else if (Game.Dealer.HasStuck)
      return "LOST";
    else
      return string.Empty;
  }

  private string GetPlayerStatusColour(Player player)
  {
    if (player.HasBusted)
      return "Red";
    else if (player.HasWon)
      return "Green";
    else if (!Game.Dealer.HasStuck && player.HasStuck)
      return "Black";
    else if (Game.Dealer.HasStuck)
      return "Red";
    else
      return "Black";
  }


  private class NewGame
  {
    public int UserId { get; set; }
    public int NumberOfBots { get; set; }
    public int BetPlaced { get; set; }
  }
}

@page "/login"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using common.Domain;
@inject NavigationManager UriHelper
@inject IHttpClientFactory ClientFactory
<h1>Please Login</h1>
<div class="login">
<p></p>
<h2>Welcome back to blackjack </h2>
<label for="password"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email:</b></label>
<input type="text" name="email" id="email" placeholder="Email" @bind-value="email" />
<p> </p>
<label for="password"><b>Password:</b></label>
<input type="text" name="password" id="password" placeholder="Password" @bind-value="password" />
<p> </p>
<span>@message</span>
</div>
<p></p>
<div class="Button">
<button class="innerbtn" @onclick="() => LogUserIn()">Login</button>
</div>





                   


@code {
    private string email;
    private string password;
    private string message;

    private async void LogUserIn()
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
        $"https://localhost:7102/User/Login?email={email}&password={password}");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var user = await JsonSerializer.DeserializeAsync<User>(responseStream);

            System.Console.WriteLine($"playblackjack?userId={user.UserId}&balance={user.Balance}");
            UriHelper.NavigateTo($"playblackjack?userId={user.UserId}&balance={user.Balance}");
        }
        else
        {
            message = "Failed to login";
            StateHasChanged();
        }     
    }
}
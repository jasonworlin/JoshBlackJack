@page "/createuser"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h3>CreateUser</h3>

<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label id="icon" for="email"><i class="fas fa-envelope"></i></label>
    <input type="text" name="email" id="email" placeholder="Email" @bind-value="user.Email"/>
    <label id="icon" for="name"><i class="fas fa-user"></i></label>
    <input type="text" name="name" id="name" placeholder="Name" @bind-value="user.Name"/>
    <label id="icon" for="password"><i class="fas fa-unlock-alt"></i></label>
    <input type="password" name="password" id="password" placeholder="Password" @bind-value="user.Password"/>
    <hr>    
    <hr>
    <div class="btn-block">
        <button>Submit</button>
    </div>
</EditForm>

@code {


    private IEnumerable<GitHubBranch> branches = Array.Empty<GitHubBranch>();
    private bool getBranchesError;
    private bool shouldRender;

    private User user = new(); 

    private async void HandleValidSubmit()
    {
        System.Console.WriteLine("HandleValidSubmit called");

        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7102/User");
        request.Content = new StringContent(JsonSerializer.Serialize(user), Encoding.UTF8, "application/json");
        
        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            /*using var responseStream = await response.Content.ReadAsStreamAsync();
            branches = await JsonSerializer.DeserializeAsync
                <IEnumerable<GitHubBranch>>(responseStream);*/
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }

    public class GitHubBranch
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }
    }
}
